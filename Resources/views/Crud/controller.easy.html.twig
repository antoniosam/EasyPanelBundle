<?php

namespace {{ controllerNamespace }};

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;

use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\Request;
use Ast\EasyPanelBundle\Lib\Easy\EasyList;
use Ast\EasyPanelBundle\Lib\Easy\EasyShow;
use Ast\EasyPanelBundle\Lib\Easy\EasyForm;
use Ast\EasyPanelBundle\Lib\Easy\Panel;
use Ast\EasyPanelBundle\Services\EasyPanelService;
use Ast\EasyDoctrinePagination\EasyPagination;

use {{ entityNamespace }};
use {{ formNamespace }};


/**
 * @Route("{{ prefixRouteController }}/{{ entityLower }}" )
 */
class {{ entity }}Controller extends AbstractController
{

    /**
     * Las columnas que se mostraran en la vista de tabla
     * @return array
     */
    private function tableFields($getLabelFields = false){
        if($getLabelFields){
            return ['{{ indexlistLabel|join("', '")|raw }}'];
        }
        return ['{{ indexlist|join("', '")|raw }}'];
    }

    /**
     * La primera columna de la vista debe ser la 1
     * @param $col
     * @return string
     */
    private function tableFieldsOrder($col){
        if($col >= 1){
            $col --;
            $campos = $this->tableFields();
            return isset($campos[$col])? $campos[$col] : '';
        }
        return '';
    }

    /**
     * Columnas donde se realizara la busqueda(deberian ser menos que el tableFields )
     * @return array
     */
    private function tableFieldsSearch(){
        return ['{{ indexlist|join("', '")|raw }}'];
    }

    /**
     *List All {{ entity }} entity
     *
     * @Route("/", name="{{ prefixRoute }}_index" )
     * @Method("GET")
     */
    public function indexAction(Request $request{{ serviceautowire }})
    {
        {{ '$this->' }}get('session')->set('menu-active', '{{ entity|lower }}');

        {{ '$em = $this->' }}getDoctrine()->getManager();
        $buscar = $request->get('buscar', '');
        $pagina = $request->get('pagina', 1);
        $col = $request->get('columna', 0);
        $orden = $request->get('orden', 'ASC');

        $paginar = new EasyPagination($em,{{ entity }}::class);
        $paginar->setPage($pagina);
        //$paginar->where('activo','=',true);// opcional
        if(!empty($buscar)){
            $paginar->search($buscar,$this->tableFieldsSearch());
        }
        if($col > 0) {
            $paginar->order($this->tableFieldsOrder($col), $orden);
        }
        $paginar->execute();
        $result = $paginar->getResult();

{% if panelTypeHtml == panelType %}
        $view = EasyList::easy('{{ seccion }}', $result['data'], $this->tableFields() , '{{ prefixRoute }}');
        $view->setLabelsTable($this->tableFields(true));
        $view->enableOrder('{{ prefixRoute }}_index' , [] , $col , $orden);
        $view->enableSearch('{{ prefixRoute }}_index' , [] , $buscar);
        $view->createListPages( $result['totalpages'] , $pagina, $buscar , '{{ prefixRoute }}_index' , []);
        return {{ serviceincontroller|raw }}->render($view);
{% elseif (panelTypeApi == panelType) %}
        $view = EasyList::easy('{{ seccion }}', $result['data'], $this->tableFields() );
        $view->setLabelsTable($this->tableFields());
        return {{ serviceincontroller|raw }}->json($view);
{% endif %}
        
    }

    /**
     * Create a new {{ entity }} entity.
     *
{% if panelTypeHtml == panelType %}
     * @Route("/new", methods={"GET","HEAD","POST"}, name="{{ prefixRoute }}_new")
{% elseif panelTypeApi == panelType %}
     * @Route("/new", methods={"HEAD","POST"}, name="{{ prefixRoute }}_new")
{% endif %}
     */
    public function nuevoAction(Request $request{{ serviceautowire }})
    {
{% if panelTypeHtml == panelType %}
        ${{ entity|lower }} = new {{ entity }}();
        $form = $this->createForm({{ formName }}::class, ${{ entity|lower }});
        if($request->getMethod()=='POST'){
            $form->handleRequest($request);
            if ($form->isSubmitted() && $form->isValid()) {
                return $this->saveForm(${{ entity|lower }});
            }else{
                $this->addFlash('warning','Debes ingresar los datos correctamente');
            }
        }
        $view = EasyForm::easy('Nuevo {{ seccion }}', $form->createView(), '{{ prefixRoute }}');
        return {{ serviceincontroller|raw }}->render($view);
{% elseif panelTypeApi == panelType %}
        $dataRequest = json_decode($request->getContent(),true);
        ${{ entity|lower }} = new {{ entity }}();
        $form = $this->createForm({{ formName }}::class, ${{ entity|lower }});
        $form->submit($dataRequest);
        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist(${{ entityLower }});
            $em->flush();
            $json = ["message"=>"{{ entity }} creada correctamente","newId"=>${{ entityLower }}->getId()];
            $status = 200;
        }else{
            $json = ["message"=>"Debes ingresar los datos correctamente"];
            $status = 400;
        }
        return $this->json($json,$status);
{% endif %}
    }
    /**
     * Todos los campos que se  mostraran
     * @return array
     */
    private function showList($getcabeceras = false){
        if($getcabeceras){
            return ['{{ showlistLabel|join("', '")|raw }}'];
        }
        return array('{{ showlist|join("', '")|raw }}');
    }
    /**
     * Finds and displays a {{ entity }} entity.
     *
     * @Route("/{id}", methods={"GET","HEAD"}, name="{{ prefixRoute }}_show", requirements={"id"="\d+"} )
     */
    public function showAction(int $id{{ serviceautowire }})
    {
        $entrada = $this->getDoctrine()->getManager()->getRepository({{entity}}::class)->findOneBy(['id'=>$id]);
{% if panelTypeHtml == panelType %}
        $view = EasyShow::easy('Ver {{ seccion }}', ${{ entity|lower }}, $this->showList(), '{{ prefixRoute }}');
        $view->setLabelsFields($this->showList(true));
        $view->setDeleteForm($this->generateDeleteForm(${{ entity|lower }})->create());
        return {{ serviceincontroller|raw }}->render($view);
{% elseif panelTypeApi == panelType %}
        $view = EasyShow::easy('{{ entityLower }}', ${{ entity|lower }}, $this->showList());
        $view->setLabelsFields($this->showList(true));
        return {{ serviceincontroller|raw }}->json($view);
{% endif %}
    }

    /**
     * Displays a form to edit an existing {{ entity }} entity.
{% if panelTypeHtml == panelType %}
     * @Route("/{id}/edit", methods={"GET","HEAD","POST"}, name="{{ prefixRoute }}_edit", requirements={"id"="\d+"})
{% elseif panelTypeApi == panelType %}
     * @Route("/{id}/edit", methods={"HEAD","POST"}, name="{{ prefixRoute }}_edit", requirements={"id"="\d+"})
{% endif %}
     */
    public function editAction(Request $request, int $id{{ serviceautowire }})
    {
        $olds = [];
{% for key,campo in propertysEntity %}
{% if campo in ['thumb','imagen','poster','foto','video','pdf','archivo','metaimage','imagenpreview','metaimagelarge'] %}
        $olds['{{ campo }}'] = ${{ entity|lower }}->get{{ campo|capitalize }}();
{% endif %}
{% endfor %}
        ${{ entityLower }} = $this->getDoctrine()->getManager()->getRepository({{entity}}::class)->findOneBy(['id'=>$id]);
{% if panelTypeHtml == panelType %}
        $editForm = $this->createForm({{ formName }}::class, ${{ entity|lower }});
        if($request->getMethod()=='POST'){
            $editForm->handleRequest($request);
            if ($editForm->isSubmitted() && $editForm->isValid()) {
                return $this->saveForm(${{ entity|lower }},$olds);
            }else{
                $this->addFlash('warning','Debes ingresar los datos correctamente');
            }
        }
        $view = EasyForm::easy('Editar {{ entity }}', $editForm->createView());
        $view->addLinkBack('{{ prefixRoute }}_show',array('id'=>${{ entity|lower }}->getId()),'Regresar');
        $view->setDeleteForm($this->generateDeleteForm(${{ entity|lower }})->createView());
        return {{ serviceincontroller|raw }}->render($view);
{% elseif panelTypeApi == panelType %}
        $editForm = $this->createForm({{ formName }}::class, ${{ entity|lower }});
        $dataRequest = json_decode($request->getContent(),true);
        $editForm->submit($dataRequest);
        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist(${{ entityLower }});
            $em->flush();
            $body = ["message"=>"{{ entity }} creada correctamente","newId"=>${{ entityLower }}->getId()];
            $status = 200;
        }else{
            $body = ["message"=>"Debes ingresar los datos correctamente"];
            $status = 400;
        }
        return $this->json($body, $status);
{% endif %}
    }

    /**
     * Deletes a {{ entity }} entity.
     *
{% if panelTypeHtml == panelType %}
     * @Route("/{id}/delete", methods={"HEAD","DELETE"}, name="{{ prefixRoute }}_delete", requirements={"id"="\d+"})
{% elseif panelTypeApi == panelType %}
    * @Route("/{id}/delete", methods={"HEAD","POST"}, name="{{ prefixRoute }}_delete", requirements={"id"="\d+"})
{% endif %}
     */
    public function deleteAction(Request $request, int $id)
    {
        ${{ entityLower }} = $this->getDoctrine()->getManager()->getRepository({{entity}}::class)->findOneBy(['id'=>$id]);
{% if panelTypeHtml == panelType %}
        $form = $this->generateDeleteForm(${{ entityLower }});
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
{% for key,campo in propertysEntity %}
{% if campo in ['thumb','imagen','poster','foto','video','pdf','archivo','metaimage','imagenpreview','metaimagelarge'] %}
            $this->deleteMedia(${{ entity|lower }}->get{{ campo|capitalize }}());
{% endif %}
{% endfor %}
            $em->remove(${{ entity|lower }});
            $em->flush();
            $this->addFlash('warning','{{ entity }} eliminado correctamente');
        }
        return $this->redirectToRoute('{{ prefixRoute }}_index');
{% elseif panelTypeApi == panelType %}
        if(${{ entityLower }}){
            $em = $this->getDoctrine()->getManager();
{% for key,campo in propertysEntity %}
{% if campo in ['thumb','imagen','poster','foto','video','pdf','archivo','metaimage','imagenpreview','metaimagelarge'] %}
            $this->deleteMedia(${{ entity|lower }}->get{{ campo|capitalize }}());
{% endif %}
{% endfor %}
            $em->remove(${{ entity|lower }});
            $em->flush();
            $body = ["message"=>"{{ entity }} eliminada correctamente"];
            $status = 200;
        }else{
            $body = ["message"=>"{{ entity }} no existe"];
            $status = 400;
        }
        return $this->json($body, $status);
{% endif %}
    }
    
    /**
     * @param {{ entity }} ${{ entity|lower }}
     * @param array|null $olds
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    private function saveForm( {{ entity }} ${{ entity|lower }}, array $olds = null){

        $em = $this->getDoctrine()->getManager();
{% for key,campo in propertysEntity %}
{% if campo in ['thumb','imagen','poster','foto','video','pdf','archivo','metaimage','imagenpreview','metaimagelarge'] %}
        if (${{ entity|lower }}->get{{ campo|capitalize }}() !== null) {
            ${{ campo }} = ${{ entity|lower }}->get{{ campo|capitalize }}();
            $new{{ campo }} = md5(microtime().'{{ key }}') .'.'.${{ campo }}->guessExtension();
            ${{ campo }}->move($this->getPublicUploads(), $new{{ campo }} );
            ${{ entity|lower }}->set{{ campo|capitalize }}($new{{ campo }});
            if(isset($olds['{{ campo }}'])){ $this->deleteMedia($olds['{{ campo }}']); }
        }else{
            if(isset($olds['{{ campo }}'])){ ${{ entity|lower }}->set{{ campo|capitalize }}($olds['{{ campo }}']); }
        }
{% endif %}
{% endfor %}
{% if  entity == "Administrador" %}
        /**
         * Este fragmento solo se debera de usar para crear el primer administrador
         * Se deberia borrar y configurar correctamente en otro controlador
         */
        if( $olds == null ){
            $salt = \Ast\CustomPassword\BuildPassword::randomSalt();
            $newpass = \Ast\CustomPassword\BuildPassword::create($administrador->getPass(),$salt);
            $administrador->setPass($newpass);
            $administrador->setSalt($salt);
        }
{% endif %}
        $em->persist(${{ entity|lower }});
        $em->flush();
        if( $olds == null ){
            $this->addFlash('success','{{ entity }} registrado correctamente');
            return $this->redirectToRoute('{{ prefixRoute }}_show', array('id'=>${{ entity|lower }}->getId()));
        }else{
            $this->addFlash('info','{{ entity }} actualizado correctamente');
            return $this->redirectToRoute('{{ prefixRoute }}_index', []);
        }
    }

    /**
     * @param {{ entity }} ${{ entity|lower }}
     * @return \Symfony\Component\Form\FormInterface
     */
    private function generateDeleteForm({{ entity }} ${{ entity|lower }})
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('{{ prefixRoute }}_delete', array('id' => ${{ entity|lower }}->getId())))
            ->setMethod('DELETE')
            ->getForm();
    }

    /**
     * @return string
     */
    protected function getPublicUploads(){
        if($this->container->hasParameter('public_dir_uploads')){
            $publicdir = $this->getParameter('public_dir_uploads');
        }else{
            $publicdir = $this->getParameter("kernel.root_dir").'{{ pathPublicUploads }}';
        }
        if(!file_exists($publicdir)){
            mkdir($publicdir,0777,true);
        }
        return $publicdir;
    }

    /**
     * @param $file
     */
    protected function deleteMedia($file){
        if(!empty($file)){
            $filename = $this->getPublicUploads().'/'.$file;
            if(file_exists($filename)){
                unlink($filename);
            }
        }
    }



}
