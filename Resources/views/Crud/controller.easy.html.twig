<?php

namespace {{ namespace }};

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;

use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\Request;
use Ast\EasyPanelBundle\Lib\Easy\EasyList;
use Ast\EasyPanelBundle\Lib\Easy\EasyShow;
use Ast\EasyPanelBundle\Lib\Easy\EasyForm;
use Ast\EasyPanelBundle\Lib\Easy\Panel;
use Ast\EasyPanelBundle\Services\EasyPanelService;
use Ast\EasyDoctrinePagination\EasyPagination;

use {{ entitybundle }};
use {{ formnamespace }};


/**
 * @Route("{{ prefix_controller_route }}/{{ entity|lower }}" )
 */
class {{ entity }}Controller extends Controller
{
{% set titulos = [] %}
{% for campo in indexlist %}
{% set titulos[] = campo|capitalize %}
{% endfor %}
    /**
     * Las columnas que se mostraran en la vista de tabla
     * @return array
     */
    private function indexColumnsTable($getcabeceras = false){
        if($getcabeceras){
            return ['{{ titulos|join("', '")|raw }}'];
        }
        return ['{{ indexlist|join("', '")|raw }}'];
    }

    /**
     * La primera columna de la vista debe ser la 1
     * @param $col
     * @return string
     */
    private function indexColumnOrder($col){
        if($col >= 1){
            $col --;
            $campos = $this->indexColumnsTable();
            return isset($campos[$col])? $campos[$col] : '';
        }
        return '';
    }

    /**
     * Columnas donde se realizara la busqueda(deberian ser menos que el indexColumnsTable )
     * @return array
     */
    private function indexColumnsSearch(){
        return ['{{ indexlist|join("', '")|raw }}'];
    }

    /**
     *List All {{ entity }} entity
     *
     * @Route("/", name="{{ ruta }}_index" )
     * @Method("GET")
     */
    public function indexAction(Request $request{{ serviceautowire }})
    {
        {{ '$this->' }}get('session')->set('menu-active', '{{ entity|lower }}');

        {{ '$em = $this->' }}getDoctrine()->getManager();
        $buscar = $request->get('buscar', '');
        $pagina = $request->get('pagina', 1);
        $col = $request->get('columna', 0);
        $orden = $request->get('orden', 'ASC');

        $paginar = new EasyPagination($em,{{ entity }}::class);
        $paginar->setPage($pagina);
        //$paginar->where('activo','=',true);// opcional
        if(!empty($buscar)){
            $paginar->search($buscar,$this->indexColumnsSearch());
        }
        if($col > 0) {
            $paginar->order($this->indexColumnOrder($col), $orden);
        }

        $paginar->execute();
        $result = $paginar->getResult();

        $view = EasyList::easy('{{ seccion }}', $result['data'], $this->indexColumnsTable() , '{{ ruta }}');
        $view->setCabeceras($this->indexColumnsTable(true));
        $view->enableOrder('{{ ruta }}_index' , [] , $col , $orden);
        $view->enableSearch('{{ ruta }}_index' , [] , $buscar);
        $view->createListPages( $result['totalpages'] , $pagina, $buscar , '{{ ruta }}_index' , []);

        return {{ serviceincontroller|raw }}->render($view);
    }

    /**
     * Create a new {{ entity }} entity.
     *
     * @Route("/new", name="{{ ruta }}_new")
     * @Method({"GET", "POST"})
     */
    public function nuevoAction(Request $request{{ serviceautowire }})
    {
        ${{ entity|lower }} = new {{ entity }}();
        $form = $this->createForm({{ form }}::class, ${{ entity|lower }});
        if($request->getMethod()=='POST'){
            $form->handleRequest($request);
            if ($form->isSubmitted() && $form->isValid()) {
                return $this->saveForm(${{ entity|lower }});
            }else{
                $this->addFlash('warning','Debes ingresar los datos correctamente');
            }
        }

        $view = EasyForm::easy('Nuevo {{ seccion }}', $form->createView(), '{{ ruta }}');

        return {{ serviceincontroller|raw }}->render($view);
    }
{% set titulos = [] %}
{% for campo in indexlist %}
    {% set titulos[] = campo|capitalize %}
{% endfor %}
    /**
     * Todos los campos que se  mostraran
     * @return array
     */
    private function showList($getcabeceras = false){
        if($getcabeceras){
            return ['{{ titulos|join("', '")|raw }}'];
        }
        return array('{{ showlist|join("', '")|raw }}');
    }
    /**
     * Finds and displays a {{ entity }} entity.
     *
     * @Route("/{id}", name="{{ ruta }}_show", requirements={"id"="\d+"} )
     * @Method("GET")
     */
    public function showAction({{ entity }} ${{ entity|lower }}{{ serviceautowire }})
    {
        $view = EasyShow::easy('{{ seccion }}', ${{ entity|lower }}, $this->showList(), '{{ ruta }}');
        $view->setCabeceras($this->showList(true));
        $view->setDeleteForm($this->generateDeleteForm(${{ entity|lower }})->createView());

        return {{ serviceincontroller|raw }}->render($view);
    }

    /**
     * Displays a form to edit an existing {{ entity }} entity.
     *
     * @Route("/{id}/edit", name="{{ ruta }}_edit", requirements={"id"="\d+"})
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, {{ entity }} ${{ entity|lower }}{{ serviceautowire }})
    {
        $olds = [];
{% for key,campo in campos %}
{% if campo in ['thumb','imagen','poster','foto','video','pdf','archivo','metaimage','imagenpreview','metaimagelarge'] %}
        $olds['{{ campo }}'] = ${{ entity|lower }}->get{{ campo|capitalize }}();
{% endif %}
{% endfor %}
        $editForm = $this->createForm({{ form }}::class, ${{ entity|lower }});
        if($request->getMethod()=='POST'){
            $editForm->handleRequest($request);
            if ($editForm->isSubmitted() && $editForm->isValid()) {
                return $this->saveForm(${{ entity|lower }},$olds);
            }else{
                $this->addFlash('warning','Debes ingresar los datos correctamente');
            }
        }

        $view = EasyForm::easy('Editar {{ entity }}', $editForm->createView());
        $view->addLinkBack('{{ ruta }}_show',array('id'=>${{ entity|lower }}->getId()),'Regresar');
        $view->setDeleteForm($this->generateDeleteForm(${{ entity|lower }})->createView());

        return {{ serviceincontroller|raw }}->render($view);
    }

    /**
     * Deletes a {{ entity }} entity.
     *
     * @Route("/{id}/delete", name="{{ ruta }}_delete", requirements={"id"="\d+"})
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, {{ entity }} ${{ entity|lower }})
    {
        $form = $this->generateDeleteForm(${{ entity|lower }});
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
{% for key,campo in campos %}
{% if campo in ['thumb','imagen','poster','foto','video','pdf','archivo','metaimage','imagenpreview','metaimagelarge'] %}
            $this->deleteMedia(${{ entity|lower }}->get{{ campo|capitalize }}());
{% endif %}
{% endfor %}
            $em->remove(${{ entity|lower }});
            $em->flush();
            $this->addFlash('warning','{{ entity }} eliminado correctamente');
        }
        return $this->redirectToRoute('{{ ruta }}_index');
    }

    /**
     * @param {{ entity }} ${{ entity|lower }}
     * @param array|null $olds
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    private function saveForm( {{ entity }} ${{ entity|lower }}, array $olds = null){

        $em = $this->getDoctrine()->getManager();
{% for key,campo in campos %}
{% if campo in ['thumb','imagen','poster','foto','video','pdf','archivo','metaimage','imagenpreview','metaimagelarge'] %}
        if (${{ entity|lower }}->get{{ campo|capitalize }}() !== null) {
            ${{ campo }} = ${{ entity|lower }}->get{{ campo|capitalize }}();
            $new{{ campo }} = md5(microtime().'{{ key }}') .'.'.${{ campo }}->guessExtension();
            ${{ campo }}->move($this->getPublicUploads(), $new{{ campo }} );
            ${{ entity|lower }}->set{{ campo|capitalize }}($new{{ campo }});
            if(isset($olds['{{ campo }}'])){ $this->deleteMedia($olds['{{ campo }}']); }
        }else{
            if(isset($olds['{{ campo }}'])){ ${{ entity|lower }}->set{{ campo|capitalize }}($olds['{{ campo }}']); }
        }
{% endif %}
{% endfor %}
{% if  entity == "Administrador" %}
        /**
         * Este fragmento solo se debera de usar para crear el primer administrador
         * Se deberia borrar y configurar correctamente en otro controlador
         */
        if( $olds == null ){
            $salt = \Ast\CustomPassword\BuildPassword::randomSalt();
            $newpass = \Ast\CustomPassword\BuildPassword::create($administrador->getPass(),$salt);
            $administrador->setPass($newpass);
            $administrador->setSalt($salt);
        }
{% endif %}
        $em->persist(${{ entity|lower }});
        $em->flush();
        if( $olds == null ){
            $this->addFlash('success','{{ entity }} registrado correctamente');
            return $this->redirectToRoute('{{ ruta }}_show', array('id'=>${{ entity|lower }}->getId()));
        }else{
            $this->addFlash('info','{{ entity }} actualizado correctamente');
            return $this->redirectToRoute('{{ ruta }}_index', []);
        }
    }

    /**
     * @param {{ entity }} ${{ entity|lower }}
     * @return \Symfony\Component\Form\FormInterface
     */
    private function generateDeleteForm({{ entity }} ${{ entity|lower }})
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('{{ ruta }}_delete', array('id' => ${{ entity|lower }}->getId())))
            ->setMethod('DELETE')
            ->getForm();
    }

    /**
     * @return string
     */
    protected function getPublicUploads(){
        if($this->container->hasParameter('public_dir_uploads')){
            $publicdir = $this->getParameter('public_dir_uploads');
        }else{
            $publicdir = $this->getParameter("kernel.root_dir").'{{ pathpublicuploads }}';
        }
        if(!file_exists($publicdir)){
            mkdir($publicdir,0777,true);
        }
        return $publicdir;
    }

    /**
     * @param $file
     */
    protected function deleteMedia($file){
        if(!empty($file)){
            $filename = $this->getPublicUploads().'/'.$file;
            if(file_exists($filename)){
                unlink($filename);
            }
        }
    }



}
