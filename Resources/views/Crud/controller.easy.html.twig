<?php

namespace {{ namespace }};

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;

use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\Request;
use Ast\EasyPanelBundle\Lib\Easy\EasyList;
use Ast\EasyPanelBundle\Lib\Easy\EasyShow;
use Ast\EasyPanelBundle\Lib\Easy\EasyForm;
use Ast\EasyPanelBundle\Lib\Easy\Panel;
use Ast\EasyPanelBundle\Services\EasyPanelService;
use Ast\EasyDoctrinePagination\EasyPagination;

use {{ entitybundle }};
use {{ formnamespace }};


/**
 * @Route("{{ prefix_controller_route }}/{{ entity|lower }}" )
 */
class {{ entity }}Controller extends Controller
{
    private function indexColumnsTable(){
        return ['{{ indexlist|join("', '")|raw }}'];
    }

    private function indexColumnsSearch(){
        return ['{{ indexlist|join("', '")|raw }}'];
    }

    private function indexColumnOrder($col){
        $campos = [1 => '{{ indexlist|join("', '")|raw }}'];
        return isset($campos[$col])? $campos[$col] : '';
    }

    /**
     *List All {{ entity }} entity
     *
     * @Route("/", name="{{ ruta }}_index" )
     * @Method("GET")
     */
    public function indexAction(Request $request, EasyPanelService $easypanel)
    {
        {{ '$em = $this->' }}getDoctrine()->getManager();
        $buscar = $request->get('buscar', '');
        $pagina = $request->get('pagina', 1);
        $col = $request->get('columna', 0);
        $orden = $request->get('orden', 'ASC');

        $paginar = new EasyPagination($em,{{ entity }}::class);
        $paginar->setPage($pagina);
        //$paginar->where('activo','=',true);// opcional
        if(!empty($buscar)){
            $paginar->search($buscar,$this->indexColumnsSearch());
        }
        if($col > 0) {
            $paginar->order($this->indexColumnOrder($col), $orden);
        }

        $paginar->execute();
        $result = $paginar->getResult();

        $view = EasyList::easy('{{ seccion }}', $result['data'], $this->indexColumnsTable() , '{{ ruta }}');
        $view->createListPages( $result['totalpages'] , $pagina, $buscar , '{{ ruta }}_index' , []);
        $view->enableOrder('{{ ruta }}_index' , [] , $col , $orden);

        return $easypanel->render($view);
    }

    /**
    * Create a new {{ entity }} entity.
    *
    * @Route("/new", name="{{ ruta }}_new")
    * @Method({"GET", "POST"})
    */
    public function nuevoAction(Request $request, EasyPanelService $easypanel)
    {
        ${{ entity|lower }} = new {{ entity }}();
        $form = $this->createForm({{ form }}::class, ${{ entity|lower }});
        if($redirect = $this->saveForm($request,$form, ${{ entity|lower }},true)){
            return $this->redirect($redirect);
        };

        $view = EasyForm::easy('Nuevo {{ seccion }}', $form->createView(), '{{ ruta }}');

        return $easypanel->render($view);
    }

    private function showList(){
        return array('{{ showlist|join("', '")|raw }}');
    }
    /**
    * Finds and displays a {{ entity }} entity.
    *
    * @Route("/{id}/show", name="{{ ruta }}_show", requirements={"id"="\d+"} )
    * @Method("GET")
    */
    public function showAction({{ entity }} ${{ entity|lower }}, EasyPanelService $easypanel)
    {
        $view = EasyShow::easy('{{ seccion }}', ${{ entity|lower }}, $this->showList(), '{{ ruta }}');
        $view->setDeleteForm($this->generateDeleteForm(${{ entity|lower }})->createView());

        return $easypanel->render($view);
    }

    /**
    * Displays a form to edit an existing {{ entity }} entity.
    *
    * @Route("/{id}/edit", name="{{ ruta }}_edit", requirements={"id"="\d+"})
    * @Method({"GET", "POST"})
    */
    public function editAction(Request $request, {{ entity }} ${{ entity|lower }}, EasyPanelService $easypanel)
    {
        $editForm = $this->createForm({{ form }}::class, ${{ entity|lower }});
        if($redirect = $this->saveForm($request,$editForm,${{ entity|lower }})){
            return $this->redirect($redirect);
        };

        $view = EasyForm::easy('Editar {{ entity }}', $editForm->createView());
        $view->addLinkBack('{{ ruta }}_show',array('id'=>${{ entity|lower }}->getId()),'Regresar');
        $view->setDeleteForm($this->generateDeleteForm(${{ entity|lower }})->createView());

        return $easypanel->render($view);
    }

    /**
    * Deletes a {{ entity }} entity.
    *
    * @Route("/{id}", name="{{ ruta }}_delete", requirements={"id"="\d+"})
    * @Method("DELETE")
    */
    public function deleteAction(Request $request, {{ entity }} ${{ entity|lower }})
    {
        $form = $this->generateDeleteForm(${{ entity|lower }});
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove(${{ entity|lower }});
            $em->flush();
            $this->addFlash('success','{{ entity }} eliminado correctamente');
        }
        return $this->redirectToRoute('{{ ruta }}_index');
    }

    /**
    * @param Request $request
    * @param FormInterface $form
    * @param {{ entity }}|null ${{ entity|lower }}
    * @return bool|string
    */
    private function saveForm(Request $request, FormInterface $form, {{ entity }} ${{ entity|lower }}, $isnew = false){
        if($request->isMethod('POST')){
            $form->handleRequest($request);
            if ($form->isSubmitted() && $form->isValid()) {
                $em = $this->getDoctrine()->getManager();
                $em->persist(${{ entity|lower }});
                $em->flush();
                if( $isnew ){
                    $this->addFlash('success','{{ entity }} registrado correctamente');
                    return $this->generateUrl('{{ ruta }}_show', array('id'=>${{ entity|lower }}->getId()));
                }else{
                    $this->addFlash('success','{{ entity }} actualizado correctamente');
                    return $this->generateUrl('{{ ruta }}_index', []);
                }
            }else{
                $this->addFlash('success','{{ entity }} actualizado correctamente');
            }

        }
        return false;

    }

    /**
    * @param {{ entity }} ${{ entity|lower }}
    * @return \Symfony\Component\Form\FormInterface
    */
    private function generateDeleteForm({{ entity }} ${{ entity|lower }})
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('{{ ruta }}_delete', array('id' => ${{ entity|lower }}->getId())))
            ->setMethod('DELETE')
            ->getForm();
    }

}
